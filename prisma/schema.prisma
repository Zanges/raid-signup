// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
}

enum Faction {
  ALLIANCE
  HORDE
}

enum GuildManagementProvider {
  MANUAL
  DISCORD
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  characters    Character[]
  guilds        Guild[]
  invites       GuildInvite[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String   
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model Character {
  id        String   @id @default(cuid())
  userId    String
  name      String
  realm     String
  faction   Faction

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, realm])
}

model Guild {
  id         String    @id @default(cuid())
  name       String
  realm      String
  faction    Faction
  members    User[]
  invites    GuildInvite[]
  provider   GuildManagementProvider
  providerId String?

  @@unique([name, realm])
  @@unique([provider, providerId])
}

model GuildInvite {
  id         String    @id @default(cuid())
  guildId    String
  userId     String
  expires    DateTime

  guild      Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
}